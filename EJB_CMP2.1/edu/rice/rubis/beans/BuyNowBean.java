package edu.rice.rubis.beans;

import java.rmi.*;
import javax.ejb.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;

/**
 * BuyNowBean is an entity bean with "container managed persistence". 
 * The state of an instance is stored into a relational database. 
 * The following table should exist:<p>
 * <pre>
 * CREATE TABLE buy_now (
 *   id       INTEGER UNSIGNED NOT NULL UNIQUE,
 *   buyer_id INTEGER UNSIGNED NOT NULL,
 *   item_id  INTEGER UNSIGNED NOT NULL,
 *   qty      INTEGER,
 *   date     DATETIME,
 *   PRIMARY KEY(id),
 *   INDEX buyer (buyer_id),
 *   INDEX item (item_id)
 * );
 * </pre>
 * @author <a href="mailto:cecchet@rice.edu">Emmanuel Cecchet</a> and <a href="mailto:julie.marguerite@inrialpes.fr">Julie Marguerite</a>
 * @version 1.0
 */

public abstract class BuyNowBean implements EntityBean 
{
  private EntityContext entityContext;
  private transient boolean isDirty; // used for the isModified function

 
  /****************************/
  /* Abstract accessor methods*/
  /****************************/

  /**
   * Set buyNow id.
   *
   * @since 1.0
   */
  public abstract void setId(Integer id);


  /**
   * Get BuyNow id.
   *
   * @return BuyNow id
   */
  public abstract Integer getId();


  /**
   * Get how many of this item the user has bought.
   *
   * @return quantity of items for this BuyNow.
   */
  public abstract int getQuantity();


  /**
   * Time of the BuyNow in the format 'YYYY-MM-DD hh:mm:ss'
   *
   * @return BuyNow time
   */
  public abstract String getDate();


  /**
   * Set a new quantity for this BuyNow
   *
   * @param Qty quantity
   */
  public abstract void setQuantity(int Qty);


  /**
   * Set a new date for this BuyNow
   *
   * @param newDate BuyNow date
   */
  public abstract void setDate(String newDate);


  /*****************/
  /* relationships */
  /*****************/

  // This entity bean has a many to one relationship with the User entity.

  /**
   * Get the user.
   *
   * @return user
   */
  public abstract UserLocal getBuyer();


  /**
   * Set a new user.
   *
   * @param newUser user
   */
  public abstract void setBuyer(UserLocal newBuyer);


  // This entity bean has a many to one relationship with the Item entity.

  /**
   * Get the item.
   *
   * @return item
   */
  public abstract ItemLocal getItem();


  /**
   * Set a new item.
   *
   * @param newItem item
   */
  public abstract void setItem(ItemLocal newItem);


  /**
   * This method is used to create a new BuyNow Bean.
   * The date is automatically set to the current date when the method is called.
   *
   * @param buyNowUser buyer
   * @param buyNowItem item
   * @param quantity number of items the user wants to buy
   *
   * @return pk primary key set to null
   * @exception CreateException if an error occurs
   */
  public Integer ejbCreate(UserLocal buyNowUser, ItemLocal buyNowItem, int quantity) throws CreateException
  {
     /*// Connecting to SB_IDManager Home interface thru JNDI
      SB_IDManagerLocalHome home = null;
      SB_IDManagerLocal idManager = null;
      
      try 
      {
        InitialContext initialContext = new InitialContext();
        home = (SB_IDManagerLocalHome)initialContext.lookup("java:comp/env/ejb/SB_IDManager");
      } 
      catch (Exception e)
      {
        throw new EJBException("Cannot lookup SB_IDManager: " +e);
      }
     try 
      {
        idManager = home.create();
        while (true)
        {
          try
          {
            setId(idManager.getNextBuyNowID());
            break;
          }
          catch (TransactionRolledbackLocalException ex)
          {
            ex.printStackTrace();
          }
        }
        setQuantity(quantity);
        setDate(TimeManagement.currentDateToString());
      } 
     catch (Exception e)
     {
        throw new EJBException("Cannot create buyNow: " +e);
      }
    return null;*/
    
    setQuantity(quantity);
    setDate(TimeManagement.currentDateToString());
    
    return null;
  }

  /** This method just set an internal flag to 
      reload the id generated by the DB */
  public void ejbPostCreate(UserLocal buyNowUser, ItemLocal buyNowItem, int quantity)
  {
    setBuyer(buyNowUser);
    setItem(buyNowItem);
    
    isDirty = true; // the id has to be reloaded from the DB
  }

  /** Persistence is managed by the container and the bean
      becomes up to date */
  public void ejbLoad()
  {
    isDirty = false;
  }

  /** Persistence is managed by the container and the bean
      becomes up to date */
  public void ejbStore()
  {
    isDirty = false;
  }

  /** This method is empty because persistence is managed by the container */
  public void ejbActivate(){}
  /** This method is empty because persistence is managed by the container */
  public void ejbPassivate(){}
  /** This method is empty because persistence is managed by the container */
  public void ejbRemove() throws RemoveException {}

  /**
   * Sets the associated entity context. The container invokes this method 
   *  on an instance after the instance has been created. 
   * 
   * This method is called in an unspecified transaction context. 
   * 
   * @param context An EntityContext interface for the instance. The instance should 
   *              store the reference to the context in an instance variable. 
   * @exception EJBException  Thrown by the method to indicate a failure 
   *                          caused by a system-level error.
   */
  public void setEntityContext(EntityContext context)
  {
    entityContext = context;
  }

  /**
   * Unsets the associated entity context. The container calls this method 
   *  before removing the instance. This is the last method that the container 
   *  invokes on the instance. The Java garbage collector will eventually invoke 
   *  the finalize() method on the instance. 
   *
   * This method is called in an unspecified transaction context. 
   * 
   * @exception EJBException  Thrown by the method to indicate a failure 
   *                          caused by a system-level error.
   */
  public void unsetEntityContext()
  {
    entityContext = null;
  }

  /**
   * Returns true if the beans has been modified.
   * It prevents the EJB server from reloading a bean
   * that has not been modified.
   *
   * @return a <code>boolean</code> value
   */
  /*public boolean isModified() 
  {
    return isDirty;
  }*/


}

package edu.rice.rubis.beans;

import java.rmi.*;
import javax.ejb.*;

/**
 * IDsBean is an entity bean with "container managed persistence". 
 * The state of an instance is stored into a relational database. 
 * The following table should exist:<p>
 * <pre>
 * CREATE TABLE ids (
 *    id        INTEGER UNSIGNED NOT NULL UNIQUE,
 *    category  INTEGER UNSIGNED NOT NULL,
 *    region    INTEGER UNSIGNED NOT NULL,
 *    users     INTEGER UNSIGNED NOT NULL,
 *    item      INTEGER UNSIGNED NOT NULL,
 *    comment   INTEGER UNSIGNED NOT NULL,
 *    bid       INTEGER UNSIGNED NOT NULL,
 *    buyNow    INTEGER UNSIGNED NOT NULL,
 *    PRIMARY KEY(id)
  * );
 * </pre>
 * @author <a href="mailto:cecchet@rice.edu">Emmanuel Cecchet</a> and <a href="mailto:julie.marguerite@inrialpes.fr">Julie Marguerite</a>
 * @version 1.0
 */

public abstract class IDsBean implements EntityBean 
{
  private EntityContext entityContext;
  private transient boolean isDirty; // used for the isModified function


  /****************************/
  /* Abstract accessor methods*/
  /****************************/

  /**
   * Get id.
   *
   * @return IDs id
   */
  public abstract Integer getId();

  /**
   * Set id.
   *
   * @param newId IDs id
   */
  public abstract void setId(Integer newId);

  /**
   * Get the category count.
   *
   * @return IDs category count
   */
  public abstract Integer getCategoryCount();

  /**
   * Set the category count.
   *
   * @param newCategoryCount category count
   */
  public abstract void setCategoryCount(Integer newCategoryCount);

  /**
   * Get the region count.
   *
   * @return IDs region count
   */
  public abstract Integer getRegionCount();

  /**
   * Set the region count.
   *
   * @param newRegionCount region count
   */
  public abstract void setRegionCount(Integer newRegionCount);

  /**
   * Get the user count.
   *
   * @return IDs user count
   */
  public abstract Integer getUserCount();

  /**
   * Set the user count.
   *
   * @param newUserCount user count
   */
  public abstract void setUserCount(Integer newUserCount);

  /**
   * Get the item count.
   *
   * @return IDs item count
   */
  public abstract Integer getItemCount();

  /**
   * Set the item count.
   *
   * @param newItemCount item count
   */
  public abstract void setItemCount(Integer newItemCount);

  /**
   * Get the comment count.
   *
   * @return IDs comment count
   */
  public abstract Integer getCommentCount();

  /**
   * Set the comment count.
   *
   * @param newCommentCount comment count
   */
  public abstract void setCommentCount(Integer newCommentCount);

  /**
   * Get the bid count.
   *
   * @return IDs bid count
   */
  public abstract Integer getBidCount();

  /**
   * Set the bid count.
   *
   * @param newBidCount bid count
   */
  public abstract void setBidCount(Integer newBidCount);

  /**
   * Get the buy now count.
   *
   * @return IDs buyNow count
   */
  public abstract Integer getBuyNowCount();

  /**
   * Set the buy now count.
   *
   * @param newBuyNowCount buyNow count
   */
  public abstract void setBuyNowCount(Integer newBuyNowCount);

  // ======================== EJB related methods ============================

  /**
   * This method is used to create a new Category Bean.
   *
   * @return pk primary key set to null
   * @exception CreateException if an error occurs
   */
  public IDsPK ejbCreate() throws CreateException
  {
      throw new CreateException();
  }


  /** This method just set an internal flag to 
      reload the id generated by the DB */
  public void ejbPostCreate()
  {
    isDirty = true; // the id has to be reloaded from the DB
  }

  /** Persistence is managed by the container and the bean
      becomes up to date */
  public void ejbLoad()
  {
    isDirty = false;
  }

  /** Persistence is managed by the container and the bean
      becomes up to date */
  public void ejbStore()
  {
    isDirty = false;
  }

  /** This method is empty because persistence is managed by the container */
  public void ejbActivate(){}
  /** This method is empty because persistence is managed by the container */
  public void ejbPassivate(){}
  /** This method is empty because persistence is managed by the container */
  public void ejbRemove() throws RemoveException {}

  /**
   * Sets the associated entity context. The container invokes this method 
   *  on an instance after the instance has been created. 
   * 
   * This method is called in an unspecified transaction context. 
   * 
   * @param context - An EntityContext interface for the instance. The instance should 
   *              store the reference to the context in an instance variable. 
   * @exception EJBException  Thrown by the method to indicate a failure 
   *                          caused by a system-level error.
   */
  public void setEntityContext(EntityContext context)
  {
    entityContext = context;
  }

  /**
   * Unsets the associated entity context. The container calls this method 
   *  before removing the instance. This is the last method that the container 
   *  invokes on the instance. The Java garbage collector will eventually invoke 
   *  the finalize() method on the instance. 
   *
   * This method is called in an unspecified transaction context. 
   * 
   * @exception EJBException  Thrown by the method to indicate a failure 
   *                          caused by a system-level error.
   */
  public void unsetEntityContext() 
  {
    entityContext = null;
  }

  /**
   * Returns true if the beans has been modified.
   * It prevents the EJB server from reloading a bean
   * that has not been modified.
   *
   * @return a <code>boolean</code> value
   */
  /*public boolean isModified() 
  {
    return isDirty;
  }*/
}

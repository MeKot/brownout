package edu.rice.rubis.beans;

import java.rmi.RemoteException;
import java.util.Collection;
import javax.ejb.CreateException;
import javax.ejb.EJBLocalHome;
import javax.ejb.FinderException;
import javax.ejb.RemoveException;
import java.util.Date;

/** This is the LocalHome interface of the Item Bean */

public interface ItemLocalHome extends EJBLocalHome {
  /**
   * This method is used to create a new Item Bean. Note that the item id
   * is automatically generated by the database (AUTO_INCREMENT) on the
   * primary key.
   *
   * @param itemName short item designation
   * @param itemDescription long item description, usually an HTML file
   * @param itemInitialPrice initial price fixed by the seller
   * @param itemQuantity number to sell (of this item)
   * @param itemReservePrice reserve price (minimum price the seller really wants to sell)
   * @param itemBuyNow price if a user wants to buy the item immediatly
   * @param duration duration of the auction in days (start date is when the method is called and end date is computed according to the duration)
   * @param itemSeller seller
   * @param itemCategory category
   *
   * @return pk primary key set to null
   *
   * @exception CreateException if an error occurs
   * @since 1.0
   */
  public ItemLocal create(String itemName, String itemDescription, float itemInitialPrice,
                     int itemQuantity, float itemReservePrice, float itemBuyNow, int duration,
                     UserLocal itemSeller, CategoryLocal itemCategory) throws CreateException;


  /**
   * This method is used to retrieve an Item Bean from its primary key,
   * that is to say its id.
   *
   * @param id Item id (primary key)
   *
   * @return the Item if found else null
   */
  public ItemLocal findByPrimaryKey(Integer id) throws FinderException;

  /**
   * This method is used to retrieve all items from the database!
   *
   * @return List of all items (eventually empty)
   */
  public Collection findAllItems() throws FinderException;

}
